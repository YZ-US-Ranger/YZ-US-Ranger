Useful references:
https://cran.r-project.org/web/views/Survival.html


Instead of calling this course “Survival analysis in R”, we should actually have called it “Time-to-event data analysis in R” because we will discuss methods where the event does not have to be death. The reason why we still called it “Survival analysis in R” is because this is the most commonly used term.

We will discuss duration times. Usually, we are interested in a certain event (for example, death) and want to know the time until this event happens. The event of interest can be very diverse, but we are always interested in the time until this event occurs.

```
# Check out the help page for this dataset
help(GBSG2, package = "TH.data")

# Load the data
data(GBSG2, package = "TH.data")

# Look at the summary of the dataset
summary(GBSG2)
```

Why do we need special methods for time-to-event data? Why can’t I just compute a linear model?

1.Duration times are always positive.

So we need to work with distributions that can handle positive outcomes. The linear model, for example, assumes a normal distribution, which is not very appropriate for positive outcomes. A common distribution to model duration times is the Weibull distribution and the corresponding model is called the Weibull model.

2.Different measures are of interest.

Historically in survival analysis, the survivor function or the survival curve has been a measure of interest. 
Usually, in regression, we think about densities and distribution functions.
The reason for the popularity of the survivor function is that it essentially answers the main questions in survival analysis. For example,
What is the probability that a breast cancer patient survives longer than 5 years?
What is the typical waiting time for a cab?
Out of 100 unemployed people, how many do we expect to have a job again after 2 months?

3.Censoring (probably the most important)

the most common type of censoring in survival analysis: right censoring. 

The `cens` variable contains values that indicate whether or not a person in the study has died.
The convention is that the censoring indicator is 1 if the event of interest happened.
`cens` = 1 means the person died during the study period.

```
# Count censored and uncensored data
num_cens <- table(GBSG2$cens)
num_cens

# Create barplot of censored and uncensored data
barplot(num_cens)
```

Using the `Surv()` function (which generates a `Surv` object.) for GBSG2

```
# Create Surv-Object
library("survival")
sobj <- Surv(GBSG2$time, GBSG2$cens)

# Look at 10 first elements
sobj[1:10]

# Look at summary
summary(sobj)

# Look at structure
str(sobj)
```

The `Surv` object allows us to specify that time and cens belong together. Notice that the elements of the object have a `+` symbol if they are censored observations.

## Survival function
Theory: S(t)=1−F(t)=P(T>t)
We denote the survival function here by capital S and the cumulative distribution function by capital F.

In the survival context, the survival function gives the probability to survive beyond a time point, small t.
The survival function is just 1 minus the cumulative distribution function.
The survival function is a function over time and for any point in time you can say how probable it is to survive longer than that point in time.

Graph: []

Interpretation 1: Probability that duration is longer than t.

Interpretation 2: We can also look at the survival function from the other direction, by fixing a certain quantile. Most popular is looking at the median. (The median is the 50%-Quantile.)
The median duration is t. 
Examples:
The median survival time is 3.7 years.
Median time until the cab arrives is 3.7 minutes.

Graph: []

Examples:
Probability to survive beyond time point t.
Probability that the cab takes more than t minutes to arrive.

Interpretation 3: The survival curve also gives us the percentage of durations taking longer than t.
100 ⋅ S^(t) percent of durations are longer than t.
Examples:
37 percent of all patients survive longer than 4 years. 63 percent die within the first 4 years.
Out of 100 cabs, 37 take more than 4 minutes to arrive.

## How to estimate the survival function using the Kaplan-Meier estimation
Formula: [] which tells us to take the product of this stuff here for all previous time points. And we only need to look at time points where something happens.
n_i denotes the number of individuals under observtion at time point t_i;
d_i denotes the number of individuals dying at t_i.

You might already know estimators for the cumulative distribution function and wonder: 
Why don't we just use that and take one minus this estimator to receive an estimator for the survival function?
This could, in fact, be done if there is no censoring or the estimator is able to deal with censoring, which is usually not the case.
Kaplan-Meier curves allow for this.

Compare the curve with the data: []
We see that the survival probability is 1 until the first event occurs at time point 4.
There it drops quite a bit because two events happen (two people die).
At time point 5 there is another smaller drop.
Note that there is no drop at time points where we have censoring, for example, time point 2.
Note also that we use these marks to visualize the time points of censoring.
At time point 2, we have 5 individuals under observation, one of them is censored at time point 2 but none die. Note that we do not need to take a product here because all time points before have a value of 1 and 1 times x is the same as x.
At time point 3 nobody dies, so the survival probability stays 1, but note how the number of individuals under observation has gone down from 5 to 4 due to the censoring of one individual.
At time point 4 two people die.
At time point 5 we need to take the previous value 1/2 times the new value.
At time point 6 nothing changes because there are no deaths.

Key take-away: It only drops when a patient dies.

We can compute the same thing in R using the survfit function.

```
km <- survfit(Surv(time, event) ~ 1)
# The 1 behind the tilde shows that we want to compute one survival function for all observations.

survfit(object)
If object is a formula : Kaplan-Meier estimation

ggsurvplot(km, conf.int = FALSE, risk.table = "nrisk_cumevents", legend = "none")
# To reproduce the plot that we have been looking at, use the ggsurvplot() function.
# The first argument is the Kaplan-Meier estimate.
# The conf.int argument signifies if you want a confidence interval, which we don't.
# risk.table = "nrisk_cumevents" signifies that we would like to see a table with the number of individuals under observation and the sum of events in brackets.
# We need no legend because we have only one curve of all patients, so we set legend = "none".
```

```
# Create time and event data
time <- c(5, 6, 2, 4, 4)
event <- c(1, 0, 0, 1, 1)

# Compute Kaplan-Meier estimate
km <- survfit(Surv(time, event) ~ 1)
km

# Take a look at the structure
str(km)

# Create data.frame
data.frame(time = km$time, n.risk = km$n.risk, n.event = km$n.event,
  n.censor = km$n.censor, surv =km$surv)
```

Understanding and visualizing Kaplan-Meier curves

Although the survival package comes with plotting functionality, I would like to focus on the ggsurvplot function from the survminer package.
This function can take a Kaplan-Meier estimate as an input.

```
library(survminer) 

ggsurvplot(fit)
```

The fit argument takes the survfit object.
A minimal version of a ggsurvplot example is just entering the survfit object into the ggsurvplot function and you are done.
But if you want to change your visualization a little, you can.

```
ggsurvplot(
fit, palette = NULL, linetype = 1, surv.median.line = "none", risk.table = FALSE, cumevents = FALSE, cumcensor = FALSE, tables.height = 0.25,
...
)
```

Palette can be used to define the colors of the curves.
By default, it uses the default color palette of ggplot, which is usually already good.
Linetype can be used to define the linetype of the curves.
surv.median.line allows you to indicate if you want to highlight the median survival time.
risk.table allows you to show a table with the number of subjects at risk of dying.
cumevents allows you to show a table with the number of events that happened already.
cumcensor allows you to show a table with the number of censored observations so far.
tables.height can be used to indicate how big the tables should be.

Example:

```
ggsurvplot(
fit = km,
palette = "blue", linetype = 1, surv.median.line = "hv", risk.table = TRUE, cumevents = TRUE, cumcensor = TRUE, tables.height = 0.1
)
```

You already computed the Kaplan-Meier estimate (called km) for the GBSG2 data set.
We want the line to be solid for which we use linetype=1.
"hv" stands for horizontal and vertical, which leads to a horizontal and a vertical line in the plot.
We would like to see all three tables and want them reasonably small, so tables.height = 0.1.

```
# Create dancedat data
dancedat <- data.frame(
  name = c("Chris", "Martin", "Conny", "Desi", "Reni", "Phil", 
    "Flo", "Andrea", "Isaac", "Dayra", "Caspar"),
  time = c(20, 2, 14, 22, 3, 7, 4, 15, 25, 17, 12),
  obs_end = c(1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0))

# Estimate the survivor function pretending that all censored observations are actual observations.
km_wrong <- survfit(Surv(time) ~ 1, data = dancedat)

# Estimate the survivor function from this dataset via kaplan-meier.
km <- survfit(Surv(time, obs_end) ~ 1, data = dancedat)

# Plot the two and compare
ggsurvplot_combine(list(correct = km, wrong = km_wrong))
```
See how ignoring censoring underestimates your friends' dancing stamina? The correct analysis (red curve) shows that your friends actually dance longer than the incorrect blue curve suggests.

## The Weibull model for estimating smooth survival curves

The Weibull model: an alternative to the Kaplan-Meier estimate
Although the Kaplan-Meier estimate is quite powerful and used by many people, it is used mostly as a descriptive tool for looking at the data.
Also, it approximates the survival curve with a step function. Graph: []
You can view the Kaplan-Meier curve similar to a histogram. It is a good way for looking at the data.
The Weibull model produces a survival curve that is not a step function but it is smooth.
Using a Weibull model instead of a Kaplan-Meier curve is like using a linear model instead of using a histogram.
The distribution we assume here is - as the name says - the Weibull distribution. It seems that this assumption works quite well in the example you see here.

Computing a Weibull model in R can be done with the survreg function from the survival package.

```
wb <- survreg(Surv(time, event) ~ 1, data)
```

In fact, it looks quite similar to using survfit to estimate a Kaplan-Meier estimate.
The only difference is the reg(which stands for REGression) in survreg instead of the fit in survfit.

Computing measures from a Weibull model

```
wb <- survreg(Surv(time, cens) ~ 1, data = GBSG2)

# 90 Percent of patients survive beyond time point:
predict(wb, type = "quantile", p = 1 - 0.9, newdata = data.frame(1))
```

p = 1 - 0.9 because the distribution function is 1 - the survival function.
Setting the type argument to quantile allows us to compute the quantiles of the distribution function. We can use this to compute the median survival. (p = 0.5)
The newdata argument allows us to enter a specific patient. This is only really relevant if we discuss the case where there are covariates in the model.

Outcome: 384. 90% of patients survive more than 384 days.

Using the predict function, we can also then compute the survival function. We just need to enter many quantiles. This approximation is good enough for plotting.
So here we create a grid form .99 to .01 in steps of .01.
The usage of the function is the same as before, just that we enter a vector of quantiles instead of a single value.
From this, we can then create a data frame that we can use for plotting.

```
wb <- survreg(Surv(time, cens) ~ 1, data = GBSG2)

# Retrieve survival curve from model probabilities 
surv <- seq(.99, .01, by = -.01)

# Get time for each probability

# Create data frame with the information
t <- predict(wb, type = "quantile", p = 1 - surv, newdata = data.frame(1))

# Look at first few lines of the result
head(data.frame(time = t, surv = surv))
```







